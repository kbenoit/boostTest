{
    "contents" : "#include <Rcpp.h>\n#include <string>\n#include <string.h>\n#include <boost/regex.hpp>\n\nusing namespace boost;\nusing namespace Rcpp;\nusing namespace std;\n\n//using boost::regex;\n//using boost::regex_replace;\n//using std::string;\n\nboost::regex re_digits(\"[[:digit:]]\");\nboost::regex re_punct(\"[[:punct:]]\");\nboost::regex re_twitter(\"(^|\\\\s)(#|@)\\\\S+\");\nboost::regex re_url(\"(?i)\\\\b((?:[a-z][\\\\w-]+:(?:/{1,3}|[a-z0-9%])|www\\\\d{0,3}[.]|[a-z0-9.\\\\-]+[.][a-z]{2,4}/)(?:[^\\\\s()<>]+|\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\))+(?:\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\)|[^\\\\s`!()\\\\[\\\\]{};:\\\\'\\\".,<>?]))\");\n\n//boost::regex re_digits(\"\");\n//boost::regex re_punct(\"\");\n//boost::regex re_twitter(\"\");\n//boost::regex re_url(\"\");\n\nconst std::string space0 = std::string(\"\");\nconst std::string space1 = std::string(\" \");\nconst std::string space2 = std::string(\"  \");\n\n// [[Rcpp::export]]\nRcpp::CharacterVector tokenizecpp(SEXP x, SEXP sep, \n                       SEXP minLength,\n                       SEXP toLower, \n                       SEXP removeDigits,\n                       SEXP removePunct,\n                       SEXP removeTwitter,\n                       SEXP removeURL,\n                       SEXP removeAdditional){\n  \n  std::string str = Rcpp::as <string> (x); \n  std::string delim = Rcpp::as <string> (sep);\n  const char *delim_char = delim.c_str();\n  int len_min = Rcpp::as <int> (minLength);\n  bool to_lower = Rcpp::as <bool> (toLower);\n  bool rm_digts = Rcpp::as <bool> (removeDigits);\n  bool rm_punct = Rcpp::as <bool> (removePunct);\n  bool rm_twitter = Rcpp::as <bool> (removeTwitter);\n  bool rm_url = Rcpp::as <bool> (removeURL);\n  \n  \n  std::string rm_addit = Rcpp::as <string> (removeAdditional);\n  \n  // Regexp cleaning\n  if(rm_digts) str = boost::regex_replace(str, re_digits, space0);\n  if(rm_punct) str = boost::regex_replace(str, re_punct, space0);\n  Rcout << \"String: '\" << str << \"'\\n\";\n  if(rm_twitter) str = boost::regex_replace(str, re_twitter, space1);\n  if(rm_url) str = boost::regex_replace(str, re_url, space0);\n  if(rm_addit.length() > 0){\n    try{\n      boost::regex re_addit(rm_addit, boost::regex::basic);\n      str = boost::regex_replace(str, re_addit, space0);\n    }catch(boost::regex_error& e){\n      Rcout << \"Invalid regular expression given: \" <<  rm_addit << \"\\n\";\n    }\n  }\n  \n  int len_str = str.length();\n  int i_pos = 0;\n  int i_len = 0;\n  bool flag_token = false;\n  std::string token;\n  std::vector <std::string> tokens;\n  \n  //Rcout << \"String: '\" << str << \"'\\n\";\n  for(int i=0; i <= len_str; i++){\n    if(to_lower) str[i] = tolower(str[i]);\n    //Rcout << i << \": \" << i_pos << \" \" << i_len << \" \" << flag_token << \" \" << str[i] << \"\\n\";\n    i_len = i - i_pos;\n    //if(!std::isalpha(str[i], loc) || str[i] == delim_char[0] || i == len_str){\n    if(str[i] == delim_char[0] || i == len_str){\n      token = str.substr(i_pos, i_len);\n      \n      if(flag_token){\n        if(i_len >= len_min){\n          tokens.push_back(token);\n          //Rcout << i << \": \" << i_pos << \"-\" << i - 1 << \" \" << token << \"\\n\";\n        }\n        flag_token = false;\n      }\n    }else{\n      if(!flag_token){\n        i_pos = i;\n        flag_token = true;\n      }\n    }\n  }    \n  return wrap(tokens);\n\n}\n\n",
    "created" : 1427322096365.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "401385660",
    "id" : "27E58BE3",
    "lastKnownWriteTime" : 1427320919,
    "path" : "~/Dropbox/QUANTESS/boostTest/src/tokenize_boost.cpp",
    "project_path" : "src/tokenize_boost.cpp",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "cpp"
}